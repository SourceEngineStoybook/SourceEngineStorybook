//==================================================================================================
//
// Vertex Shader for the Earth Shader Created by White_Red_Dragons ( ShiroDkxtro2#8750 )
//
//==================================================================================================

//  DYNAMIC: "COMPRESSED_VERTS"         "0..1"
//  DYNAMIC: "DOWATERFOG"               "0..1"
//  DYNAMIC: "SKINNING"                 "0..1"
//  DYNAMIC: "LIGHTING_PREVIEW"         "0..1"
//	DYNAMIC: "DYNAMIC_LIGHT"			"0..1"
//	DYNAMIC: "STATIC_LIGHT_VERTEX"		"0..1"
//  DYNAMIC: "NUM_LIGHTS"               "0..4"

#include "common_vs_fxc.h"

static const bool g_bSkinning = SKINNING ? true : false;
static const int g_FogType = DOWATERFOG;
const float4 cBaseTexCoordTransform[2]  : register(SHADER_SPECIFIC_CONST_0);		// 0 & 1
const float4x4 g_FlashlightWorldToTexture : register(SHADER_SPECIFIC_CONST_6);		// 6, 7, 8, 9

//-----------------------------------------------------------------------------
// Input vertex format
//-----------------------------------------------------------------------------
struct VS_INPUT
{
	// This is all of the stuff that we ever use
	float4 vPos						: POSITION;
	float4 vBoneWeights				: BLENDWEIGHT;
	float4 vBoneIndices				: BLENDINDICES;
	float4 vNormal					: NORMAL;
	float4 vColor					: COLOR0;
	float3 vSpecular				: COLOR1;			// Required as input for Vertex Lighting, removed on bumped shaders ( input won't work :/ )
	float2 vTexCoord0				: TEXCOORD0;
	float4 vLightmapTexCoord		: TEXCOORD1;
	float4 vLightmapTexCoordOffset	: TEXCOORD2;
};

struct VS_OUTPUT
{
	// Stuff that isn't seen by the pixel shader
	float4 projPosSetup				: POSITION;
	float  fog						: FOG;
	// Stuff that is seen by the pixel shader
	// Important, because doing like 12 outputs or so will crash the compile with a "too many outputs" error
	float2 baseTexCoord				: TEXCOORD0;
	float4 lightAtten				: TEXCOORD1;
	float3 worldNormal				: TEXCOORD2;
	float3 worldPos					: TEXCOORD3;
	float3 projPos					: TEXCOORD4;
	float4 lightmapTexCoord1And2	: TEXCOORD5;
	float4 lightmapTexCoord3		: TEXCOORD6;
	float4 color					: TEXCOORD7;
};

//-----------------------------------------------------------------------------
// Main shader entry point
//-----------------------------------------------------------------------------
VS_OUTPUT main(const VS_INPUT v)
{
	VS_OUTPUT o = (VS_OUTPUT)0;

	bool bDynamicLight = DYNAMIC_LIGHT ? true : false;
	bool bStaticLight = STATIC_LIGHT_VERTEX ? true : false;
	bool bDoLighting = (bDynamicLight || bStaticLight);

	o.lightmapTexCoord3.z = dot(v.vTexCoord0, cBaseTexCoordTransform[0]) + cBaseTexCoordTransform[0].w;
	o.lightmapTexCoord3.w = dot(v.vTexCoord0, cBaseTexCoordTransform[1]) + cBaseTexCoordTransform[1].w;
	o.lightmapTexCoord1And2.xy = v.vLightmapTexCoord + v.vLightmapTexCoordOffset;

	float2 lightmapTexCoord2 = o.lightmapTexCoord1And2.xy + v.vLightmapTexCoordOffset;
	float2 lightmapTexCoord3 = lightmapTexCoord2 + v.vLightmapTexCoordOffset;

	// Reversed component order
	o.lightmapTexCoord1And2.w = lightmapTexCoord2.x;
	o.lightmapTexCoord1And2.z = lightmapTexCoord2.y;

	o.lightmapTexCoord3.xy = lightmapTexCoord3;

	float3 vNormal;
	DecompressVertex_Normal(v.vNormal, vNormal);

	float3 worldNormal, worldPos;
	SkinPositionAndNormal(g_bSkinning, v.vPos, vNormal, v.vBoneWeights, v.vBoneIndices, worldPos, worldNormal);

	// Transform into projection space
	float4 vProjPos = mul(float4(worldPos, 1), cViewProj);
	o.projPosSetup = vProjPos;
	vProjPos.z = dot(float4(worldPos, 1), cViewProjZ);

	o.projPos = vProjPos.xyz;
	o.fog = CalcFog(worldPos, vProjPos.xyz, g_FogType);

	// Needed for water fog alpha and diffuse lighting 
	o.worldPos = worldPos;
	o.worldNormal = normalize(worldNormal);

	// Scalar attenuations for four lights
	o.lightAtten = float4(0, 0, 0, 0);


	// This is the VertexLighting Code Call
	if (bDoLighting)
	{
	o.color.xyz = DoLighting( worldPos, worldNormal, v.vSpecular, bStaticLight, bDynamicLight, false );
	}
	else
	{
	//	If it doesn't do VertexLighting set the default color values to 1, 1, 1 so it doesn't mess up the results on the Pixelshader
	//	This is a leftover from VLG++ stuff that I copied over, Originally it multiplies the lighting result over the basetexture,
	//	however that is inoptimal as when its 0, 0, 0 the result will be black even if you have other lighting. 1, 1, 1 means it will remain the same
	o.color.xyz = float3(1, 1, 1);
	}

#if (NUM_LIGHTS > 0)
	o.lightAtten.x = GetVertexAttenForLight(worldPos, 0, false);
#endif

#if (NUM_LIGHTS > 1)
	o.lightAtten.y = GetVertexAttenForLight(worldPos, 1, false);
#endif

#if (NUM_LIGHTS > 2)
	o.lightAtten.z = GetVertexAttenForLight(worldPos, 2, false);
#endif

#if (NUM_LIGHTS > 3)
	o.lightAtten.w = GetVertexAttenForLight(worldPos, 3, false);
#endif

	// Base texture coordinate transform
	o.baseTexCoord.x = dot(v.vTexCoord0, cBaseTexCoordTransform[0]);
	o.baseTexCoord.y = dot(v.vTexCoord0, cBaseTexCoordTransform[1]);
	o.baseTexCoord = v.vTexCoord0;

	return o;
}